############################################### Setup #######################################################
version: "3.8"

volumes:
  ElasticData: {}
  ElasticData1: {}
  ElasticData2: {}
  ElasticConfig: {}
  Kibana: {}
  Filebeat: {}
  FilebeatData: {}
  Logstash: {}

networks:
  monitor-net:
    driver: bridge

services:
  elasticsearch:
    build:
      context: ./server/elk/elasticsearch
      dockerfile: Dockerfile
      args:
        ELK_VERSION: ${ELK_VERSION}
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
    volumes:
      - ElasticData:/usr/share/elasticsearch/data
      - ElasticConfig:/usr/share/elasticsearch/config
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sf --insecure http://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]

  logstash:
    build:
      context: ./server/elk/logstash
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: logstash
    restart: unless-stopped
    volumes:
      - Logstash:/usr/share/logstash
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP} -Dlog4j2.formatMsgNoLookups=true"
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sf --insecure http://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]

  kibana:
    build:
      context: ./server/elk/kibana
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    restart: unless-stopped
    volumes:
      - Kibana:/usr/share/kibana
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    ports:
      - "5601:5601"
    networks:
      - monitor-net

  # filebeat:
  #   build:
  #     context: ./server/elk/filebeat
  #     args:
  #       ELK_VERSION: $ELK_VERSION
  #   restart: always
  #   command: -e --strict.perms=false
  #   user: root
  #   container_name: filebeat
  #   environment:
  #     ELASTIC_USERNAME: ${ELASTIC_USERNAME}
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
  #     KIBANA_HOST_PORT: ${KIBANA_HOST}:${KIBANA_PORT}
  #     ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
  #   expose:
  #     - 5066
  #   volumes:
  #     - Filebeat:/usr/share/filebeat
  #     - FilebeatData:/var/lib/filebeat/data
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro‚èé
  #   networks:
  #     - monitor-net

################################################################################################################

  # elasticsearch_poseidon:
  #   build:
  #     context: ./server/elk/elasticsearch
  #     dockerfile: Dockerfile
  #     args:
  #       ELK_VERSION: ${ELK_VERSION}
  #   container_name: elasticsearch_poseidon
  #   restart: unless-stopped
  #   environment:
  #     ELASTIC_USERNAME: ${ELASTIC_USERNAME}
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
  #     ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
  #     ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME_1}
  #     ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
  #     ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
  #     ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true"
  #     bootstrap.memory_lock: "true"
  #   volumes:
  #     - ElasticData1:/usr/share/elasticsearch/data
  #     - ElasticConfig:/usr/share/elasticsearch/config
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 200000
  #       hard: 200000
  #   networks:
  #     - monitor-net
  #   # healthcheck:
  #   #   test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]

  # elasticsearch_hades:
  #   build:
  #     context: ./server/elk/elasticsearch
  #     dockerfile: Dockerfile
  #     args:
  #       ELK_VERSION: ${ELK_VERSION}
  #   container_name: elasticsearch_hades
  #   restart: unless-stopped
  #   environment:
  #     ELASTIC_USERNAME: ${ELASTIC_USERNAME}
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
  #     ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
  #     ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME_1}
  #     ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
  #     ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
  #     ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true"
  #     bootstrap.memory_lock: "true"
  #   volumes:
  #     - ElasticData2:/usr/share/elasticsearch/data
  #     - ElasticConfig:/usr/share/elasticsearch/config
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 200000
  #       hard: 200000
  #   networks:
  #     - monitor-net
  #   # healthcheck:
  #   #   test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]

  # rubban:
  #   image: sherifabdlnaby/rubban:latest
  #   restart: unless-stopped
  #   container_name: rubban
  #   environment:
  #     RUBBAN_KIBANA_HOST: "https://${KIBANA_HOST}:${KIBANA_PORT}"
  #     RUBBAN_KIBANA_USER: ${ELASTIC_USERNAME}
  #     RUBBAN_KIBANA_PASSWORD: ${ELASTIC_PASSWORD}
  #     RUBBAN_REFRESHINDEXPATTERN_ENABLED: "true"
  #     RUBBAN_REFRESHINDEXPATTERN_SCHEDULE: "*/5 * * * *"
  #     RUBBAN_REFRESHINDEXPATTERN_PATTERNS: "*"
  #     RUBBAN_AUTOINDEXPATTERN_ENABLED: "true"
  #     RUBBAN_AUTOINDEXPATTERN_SCHEDULE: "*/5 * * * *"
  #     RUBBAN_AUTOINDEXPATTERN_GENERALPATTERNS: '[{"pattern":"filebeat?","timeFieldName":"@timestamp"},{"pattern":"logstash?","timeFieldName":"@timestamp"}]'

  # elasticsearch-exporter:
  #   container_name: elasticsearch_exporter
  #   image: justwatch/elasticsearch_exporter:1.1.0
  #   restart: always
  #   command:
  #     [
  #       "--es.uri",
  #       "https://${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}@${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}",
  #       "--es.ssl-skip-verify",
  #       "--es.all",
  #       "--es.snapshots",
  #       "--es.indices",
  #     ]
  #   ports:
  #     - "9114:9114"

  # logstash-exporter:
  #   image: alxrem/prometheus-logstash-exporter:0.7.0
  #   container_name: logstash_exporter
  #   restart: always
  #   ports:
  #     - "9304:9304"
  #   command: ["-logstash.host", "logstash"]
  #   networks:
  #     - monitor-net
